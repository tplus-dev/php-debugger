<?php

	/**
	 * Data class
	 *
	 * @author Mark HÃ¼nermund Jensen
	 */
	
	namespace Bytes;

	class GlobalScope {

	    /* ======================================================================================================
	       PROPERTIES
	    ====================================================================================================== */

	    /**
	     * Stored route for later retrieval
	     * @var string
	     */
	    
	    private $Route;

	    /**
	     * Data stream
	     * @var array
	     */
	    
	    static private $DataStream;

	    /* ======================================================================================================
	       GET
	    ====================================================================================================== */

	    /**
	     * Return data from GET
	     *
	     * @access public
	     * @param string $Key
	     * @return mixed
	     */
	    
	    public function GET ( string $Key ) {

	        /* ------------------------------------------------------------------------------------------------------
	           RETURN
	        ------------------------------------------------------------------------------------------------------ */

	        return isset( $_GET[ $Key ] ) ? $_GET[ $Key ] : Null;

	    }

	    /* ======================================================================================================
	       POST
	    ====================================================================================================== */

	    /**
	     * Return data from POST
	     *
	     * @access public
	     * @param string $Key
	     * @return mixed
	     */
	    
	    public function POST ( string $Key ) {

	        /* ------------------------------------------------------------------------------------------------------
	           RETURN
	        ------------------------------------------------------------------------------------------------------ */

	        return isset( $_POST[ $Key ] ) ? $_POST[ $Key ] : Null;

	    }

	    /* ======================================================================================================
	       PUT
	    ====================================================================================================== */

	    /**
	     * Return data from PUT
	     *
	     * @access public
	     * @param string $Key
	     * @uses GlobalScope::DataStream
	     * @return mixed
	     */
	    
	    public function PUT ( string $Key ) {

	        /* ------------------------------------------------------------------------------------------------------
	           RETURN
	        ------------------------------------------------------------------------------------------------------ */

	        return $this -> DataStream( $Key );

	    }

	    /* ======================================================================================================
	       PATCH
	    ====================================================================================================== */

	    /**
	     * Return data from PATCH
	     *
	     * @access public
	     * @param string $Key
	     * @uses GlobalScope::DataStream
	     * @return mixed
	     */
	    
	    public function PATCH ( string $Key ) {

	        /* ------------------------------------------------------------------------------------------------------
	           RETURN
	        ------------------------------------------------------------------------------------------------------ */

	        return $this -> DataStream( $Key );

	    }

	    /* ======================================================================================================
	       DELETE
	    ====================================================================================================== */

	    /**
	     * Return data from DELETE
	     *
	     * @access public
	     * @param string $Key
	     * @uses GlobalScope::DataStream
	     * @return mixed
	     */
	    
	    public function DELETE ( string $Key ) {

	        /* ------------------------------------------------------------------------------------------------------
	           RETURN
	        ------------------------------------------------------------------------------------------------------ */

	        return $this -> DataStream( $Key );

	    }

	    /* ======================================================================================================
	       STORE DATA STREAM
	    ====================================================================================================== */

	    /**
	     * Stores the passed data stream (PUT, PATCH and DELETE)
	     *
	     * @access private
	     * @param string $Key
	     * @return mixed
	     */
	    
	    private function DataStream ( string $Key ) {

	        /* ------------------------------------------------------------------------------------------------------
	           STORE
	        ------------------------------------------------------------------------------------------------------ */

	        if ( is_null( self::$DataStream ) ) {

	        	$DataStream 			= [];

	        	parse_str( file_get_contents( 'php://input' ) , $DataStream );

	        	self::$DataStream 		= $DataStream;

	        }

	        /* ------------------------------------------------------------------------------------------------------
	           RETURN
	        ------------------------------------------------------------------------------------------------------ */

	        return isset( self::$DataStream[ $Key ] ) ? self::$DataStream[ $Key ] : Null;

	    }

	    /* ======================================================================================================
	       SET ROUTE
	    ====================================================================================================== */

	    /**
	     * Define the route, so it can be retrieved later
	     *
	     * @access public
	     * @param string $Route
	     * @return GlobalScope
	     */
	    
	    public function SetRoute ( string $Route ): GlobalScope {

	        /* ------------------------------------------------------------------------------------------------------
	           SET
	        ------------------------------------------------------------------------------------------------------ */

	        if ( is_null( $this -> Route ) ) {

	        	$this -> Route 			= $Route;

	        }

	        /* ------------------------------------------------------------------------------------------------------
	           RETURN
	        ------------------------------------------------------------------------------------------------------ */

	        return $this;

	    }

	    /* ======================================================================================================
	       GET ROUTE
	    ====================================================================================================== */

	    /**
	     * Retrieve the route
	     *
	     * @access public
	     * @return string
	     */
	    
	    public function GetRoute ( ): string {

	        /* ------------------------------------------------------------------------------------------------------
	           RETURN
	        ------------------------------------------------------------------------------------------------------ */

	        return (string) $_GET[ 'Route' ];

	    }

	    /* ======================================================================================================
	       CLI ARGUMENT
	    ====================================================================================================== */

	    /**
	     * Retrieve a CLI argument
	     *
	     * @access public
	     * @param string $Key
	     * @return mixed
	     */
	    
	    public function CLIArgument ( string $Key ) {

	        /* ------------------------------------------------------------------------------------------------------
	           GLOBAL
	        ------------------------------------------------------------------------------------------------------ */

	    	global $argv;

	        /* ------------------------------------------------------------------------------------------------------
	           CLI ARGUMENT
	        ------------------------------------------------------------------------------------------------------ */

        	// We have to do a little "hacking" to be able to freely load the CLI arguments
        	// 
        	// Unfortunately, the getopt function will stop parsing, as soon as it meets a parameter
        	// it doesn't know.
        	// 
        	// So to allow the developer to freely choose in CLI arguments, we'll break the full
        	// argument string up, and pretend they are all parameters.
        	// 
        	// It's not pretty, but it provides freedom!

        	$ShortOptions 			= '';
        	$LongOptions 			= [];

        	foreach ( $argv as $I => $Argument ) {

        		// If a short option:

        		if ( $Argument[ 0 ] == '-' && strlen( $Argument ) == 2 ) {

        			$ShortOptions 	.= $Argument[ 1 ] . ( $argv[ $I + 1 ][ 0 ] == '-' ? ' ' : ':' );

        		// If a long option

        		} else if ( substr( $Argument , 0 , 2 ) === '--' ) {

        			$LongOptions[] 	= substr( $Argument , 2 ) . ':';

        		}

        	}

        	// Attempt to extract data for use in command line interface (CLI)

        	$Options 				= getopt( $ShortOptions , $LongOptions );

        	// Add duplet of keys to match our name convention

        	foreach ( $Options as $OptionKey => $Value ) {

        		$NewKey 				= ucfirst( $OptionKey );

        		$Options[ $NewKey ] 	= $Value;

        	}

            /* ------------------------------------------------------------------------------------------------------
               RETURN
            ------------------------------------------------------------------------------------------------------ */

        	return isset( $Options[ $Key ] ) ? $Options[ $Key ] : False;

	    }

	    /* ======================================================================================================
	       CLI DIRECTORY
	    ====================================================================================================== */

	    /**
	     * Returns the directory where the CLI is invoked
	     *
	     * @access public
	     * @return string
	     */
	    
	    public function CLIDirectory ( ): string {

	        /* ------------------------------------------------------------------------------------------------------
	           RETURN
	        ------------------------------------------------------------------------------------------------------ */

	        return getcwd();

	    }

	    /* ======================================================================================================
	       AUTO
	    ====================================================================================================== */

	    /**
	     * Retrieve a global variable
	     *
	     * @access protected
	     * @param string $Key The case-sensitive name of the global variable
	     * @todo Additional care must be taken on the CLI arguments; For instance values with no spaces are flawed
	     * @return mixed
	     */
	    
	    protected function Auto ( string $Key ) {

	        /* ------------------------------------------------------------------------------------------------------
	           RETURN
	        ------------------------------------------------------------------------------------------------------ */

	        if ( isset( $_POST[ $Key ] ) ) {

	        	return $this -> POST[ $Key ];

	        } else if ( isset( $_GET[ $Key ] ) ) {

	        	return $this -> GET[ $Key ];

	        } else {

	        	return $this -> CLIArgument( $Key );

	        }

	    }

	}