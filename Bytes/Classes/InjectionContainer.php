<?php

	/**
	 * Injection container class
	 *
	 * @author Mark HÃ¼nermund Jensen
	 */
	
	namespace Bytes;
	
	class InjectionContainer extends StandardClass {

	    /* ======================================================================================================
	       PROPERTIES
	    ====================================================================================================== */

	    /**
	     * Container of injected objects
	     * @var array
	     */
	    
	    private $Container 			= [];

	    /* ======================================================================================================
	       ATTACH
	    ====================================================================================================== */

	    /**
	     * Add an object to the container
	     *
	     * @final
	     * @access public
	     * @param string $Id Identifier for the object (case-sensitive)
	     * @param mixed $Object
	     * @param array $Extra Additional options such as grouping
	     * @return InjectionContainer
	     */
	    
	    final public function Attach ( string $Id , $Object , array $Extra = [] ): InjectionContainer {

	        /* ------------------------------------------------------------------------------------------------------
	           SET
	        ------------------------------------------------------------------------------------------------------ */

	        $this -> Container[ $Id ] 		= [

	        									'Instance' 		=> $Object,
	        									'Extra' 		=> $Extra

	        								];

	        /* ------------------------------------------------------------------------------------------------------
	           RETURN
	        ------------------------------------------------------------------------------------------------------ */

	        return $this;

	    }

	    /* ======================================================================================================
	       RETRIEVE
	    ====================================================================================================== */

	    /**
	     * Returns an instance of an object
	     *
	     * @final
	     * @access public
	     * @param string $Id Identifier for the object (case-sensitive)
	     * @throws \Bytes\ConfigurationException Raised if the object does not exist
	     * @return mixed
	     */
	    
	    final public function Retrieve ( string $Id ) {

	        /* ------------------------------------------------------------------------------------------------------
	           ENSURE EXISTENCE
	        ------------------------------------------------------------------------------------------------------ */

	        if ( ! isset( $this -> Container[ $Id ] ) ) {

	        	throw new ConfigurationException( sprintf(

	        		'%s has not been properly injected.',

	        		$Id

	        	) );

	        }

	        /* ------------------------------------------------------------------------------------------------------
	           RETURN
	        ------------------------------------------------------------------------------------------------------ */

	        return $this -> Container[ $Id ][ 'Instance' ];

	    }

	    /* ======================================================================================================
	       RETRIEVE ALL
	    ====================================================================================================== */

	    /**
	     * Returns array with all contained objects
	     *
	     * @access public
	     * @return array
	     */
	    
	    public function RetrieveAll ( ): array {

	   	    /* --------------------------------------------------------------------------------------------------
	   	       RESULT
	   	    -------------------------------------------------------------------------------------------------- */

	   	    $Result 			= [];

	   	    foreach ( $this -> Container as $I => $Instance ) {

	   	    	$Result[ $I ] 	= $Instance[ 'Instance' ];

	   	    }

	        /* ------------------------------------------------------------------------------------------------------
	           RETURN
	        ------------------------------------------------------------------------------------------------------ */

	        return $Result;

	    }

	    /* ======================================================================================================
	       RETRIEVE CHILDREN OF
	    ====================================================================================================== */

	    /**
	     * Returns array with all objects that belong to this group
	     *
	     * @access public
	     * @param string $Group
	     * @return array
	     */
	    
	    public function RetrieveGroup ( string $Group ): array {

	        /* --------------------------------------------------------------------------------------------------
	           INITIALIZE
	        -------------------------------------------------------------------------------------------------- */

	        $Result 				= [];

	        /* --------------------------------------------------------------------------------------------------
	           FIND CHILDREN
	        -------------------------------------------------------------------------------------------------- */

	        foreach ( $this -> Container as $InstanceId => $Instance ) {

	        	if ( isset( $Instance[ 'Extra' ][ 'Groups' ] ) && in_array( $Group , $Instance[ 'Extra' ][ 'Groups' ] ) ) {

	        		$Result[ $InstanceId ] 		= $Instance[ 'Instance' ];

	        	}

	        }

	        /* ------------------------------------------------------------------------------------------------------
	           RETURN
	        ------------------------------------------------------------------------------------------------------ */

	        return $Result;

	    }

	    /* ======================================================================================================
	       MERGE WITH
	    ====================================================================================================== */

	    /**
	     * Merge with another InjectionContainer
	     *
	     * @access public
	     * @param \Bytes\InjectionContainer $InjectionContainer
	     * @return InjectionContainer
	     */
	    
	    public function MergeWith ( \Bytes\InjectionContainer $InjectionContainer ): InjectionContainer {

	        /* ------------------------------------------------------------------------------------------------------
	           PERFORM MERGE
	        ------------------------------------------------------------------------------------------------------ */

	        $Container 				= $InjectionContainer -> RetrieveAll();

	        foreach ( $Container as $Id => $Instance ) {

	        	$this -> Attach( $Id , $Instance );

	        }

	        /* ------------------------------------------------------------------------------------------------------
	           RETURN
	        ------------------------------------------------------------------------------------------------------ */

	        return $this;

	    }

	}