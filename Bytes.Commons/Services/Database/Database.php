<?php

	/**
	 * Database service
	 *
	 * @author Mark HÃ¼nermund Jensen
	 */

	namespace Bytes\Services;

	class Database extends \Bytes\Service {

	    /* ======================================================================================================
	       PROPERTIES
	    ====================================================================================================== */

	    /**
	     * PDO instance
	     * 
	     * Note: This property is created as a static variable, so we only have to connect once to the database
	     * even though it may be used accross multiple objects
	     * 
	     * @var \PDO
	     */
	    
	    private static $PDO;

	    /**
	     * Keep track of database name, so it can be returned in various scenarios
	     * @var string
	     */
	    
	    private $DatabaseName;

	    /* ======================================================================================================
	       PREPARE
	    ====================================================================================================== */

	    /**
	     * Prepare is a universal, optional method which can be triggered by the ObjectBuilder
	     * before the instance is returned for use
	     */

	    public function Prepare ( ) {

	        /* ------------------------------------------------------------------------------------------------------
	           ESTABLISH CONNECTION
	        ------------------------------------------------------------------------------------------------------ */

	    	$this -> Connect();

	    }

	    /* ======================================================================================================
	       DECLARE OPTIONS
	    ====================================================================================================== */

	    /**
	     * Option method to declare expected options
	     *
	     * @access public
	     * @param \Bytes\Options $Options
	     * @return void
	     */
	    
	    public function DeclareOptions ( \Bytes\Options &$Options ) {

	        /* ------------------------------------------------------------------------------------------------------
	           DECLARE
	        ------------------------------------------------------------------------------------------------------ */

	        $Options -> Declare( 'Host' , 'localhost' ) -> Commit();
	        $Options -> Declare( 'User' , 'root' ) -> Commit();
	        $Options -> Declare( 'Password' , '' ) -> Commit();
	        $Options -> Declare( 'DatabaseName' ) -> AsRequired() -> Commit();

	    }

	    /* ======================================================================================================
	       CONNECT
	    ====================================================================================================== */

	    /**
	     * Connect to the database
	     *
	     * @access protected
	     * @throws \PDOException Raised if PDO cannot connect to the database (credentials, missing database, etc.)
	     * @return void
	     */
	    
	    protected function Connect ( ) {

	        /* ------------------------------------------------------------------------------------------------------
	           GET FROM ENVIRONMENT
	        ------------------------------------------------------------------------------------------------------ */

	        $Host 				= $this -> Option( 'Host' );
	        $DatabaseName 		= $this -> Option( 'DatabaseName' );
	        $User 				= $this -> Option( 'User' );
	        $Password 			= $this -> Option( 'Password' );

	    	if ( is_null( self::$PDO ) ) {
	    		
    			self::$PDO 				= new \PDO( 

	    									sprintf( 'mysql:host=%s;dbname=%s' , $Host , $DatabaseName ),
	    									$User,
	    									$Password,
	    									[

	    										\PDO::ATTR_DEFAULT_FETCH_MODE 	=> \PDO::FETCH_ASSOC,
	    										\PDO::ATTR_EMULATE_PREPARES 	=> False

	    									]

	    								);

	        	$this -> DatabaseName 	= $DatabaseName;

	    	}

	    }

	    /* ======================================================================================================
	       GET DATABASE NAME
	    ====================================================================================================== */

	    /**
	     * Returns database name
	     *
	     * @access public
	     * @throws \Bytes\Exception Raised if database is not connected
	     * @return string
	     */
	    
	    public function GetDatabaseName ( ): string {

	        /* ------------------------------------------------------------------------------------------------------
	           VALIDATE
	        ------------------------------------------------------------------------------------------------------ */

	        if ( is_null( $this -> DatabaseName ) ) {

	        	throw new \Bytes\Exception( 'Cannot return database name when not connected to one' );

	        }

	        /* ------------------------------------------------------------------------------------------------------
	           RETURN
	        ------------------------------------------------------------------------------------------------------ */

	        return $this -> DatabaseName;

	    }

	    /* ======================================================================================================
	       QUERY
	    ====================================================================================================== */

	    /**
	     * Perform a (prepared statement) query
	     *
	     * @access public
	     * @param string $Query
	     * @param array $Parameters Associateive array with key/value pairs
	     * @return array Output from MySQL
	     */

	    public function Query ( string $Query , array $Parameters = [] ): array {

	        /* ------------------------------------------------------------------------------------------------------
	           PREAPRE
	        ------------------------------------------------------------------------------------------------------ */

	        $PreparedStatement 		= self::$PDO -> prepare( $Query );

	        /* ------------------------------------------------------------------------------------------------------
	           VALIDATE
	        ------------------------------------------------------------------------------------------------------ */

	        $PDOError 				= self::$PDO -> errorInfo();

	        // If PDO has found an error, we'll show it

	        if ( $PDOError[ 1 ] > 0 ) {

	        	throw new \Bytes\ServiceException( 'Query error: ' . $PDOError[ 2 ] );

	        }
	        
	        /* ------------------------------------------------------------------------------------------------------
	           PARAMETERS
	        ------------------------------------------------------------------------------------------------------ */

	        foreach ( $Parameters as $Key => $Value ) {

	        	// Add the PDO variable marker
	        	// Doing this automatically makes it a little faster to type in queries

	        	if ( $Key[ 0 ] != ':' ) {

	        		$Key 			= ':' . $Key;

	        	}

	        	// Bind the value to the statement

	        	$PreparedStatement -> bindValue( $Key , $Value );

	        }

	        /* ------------------------------------------------------------------------------------------------------
	           EXECUTE
	        ------------------------------------------------------------------------------------------------------ */

	        $PreparedStatement -> execute();

	        /* ------------------------------------------------------------------------------------------------------
	           CHECK FOR ERROR IN STATEMENT
	        ------------------------------------------------------------------------------------------------------ */

	        if ( $PreparedStatement -> errorInfo()[ 1 ] > 0 ) {

	        	throw new \Bytes\ServiceException( 'Error on query execution: ' . $PreparedStatement -> errorInfo()[ 2 ] );

	        }

	        /* ------------------------------------------------------------------------------------------------------
	           RETURN
	        ------------------------------------------------------------------------------------------------------ */

	        return $PreparedStatement -> fetchAll();

	    }

	    /* ======================================================================================================
	       GET ERROR
	    ====================================================================================================== */

	    /**
	     * Returns information on eventual error on latest query
	     *
	     * @access public
	     * @return array
	     */
	    
	    public function GetError ( ): array {

	   	    /* --------------------------------------------------------------------------------------------------
	   	       INITIALIZE
	   	    -------------------------------------------------------------------------------------------------- */

	   	    $ErrorInfo 			= self::$PDO -> errorInfo();

	        /* --------------------------------------------------------------------------------------------------
	           RETURN
	        -------------------------------------------------------------------------------------------------- */

	        return is_null( $ErrorInfo[ 1 ] )
	        	? []
	        	: [

	        		'Message' 		=> (string) $ErrorInfo[ 1 ]

	        	];

	    }

	    /* ======================================================================================================
	       START TRANSACTION
	    ====================================================================================================== */

	    /**
	     * Starts a new transaction
	     *
	     * @access public
	     * @return Database
	     */
	    
	    public function StartTransaction ( ): Database {

	        /* ------------------------------------------------------------------------------------------------------
	           ACT
	        ------------------------------------------------------------------------------------------------------ */

	        self::$PDO -> beginTransaction();

	        /* ------------------------------------------------------------------------------------------------------
	           RETURN
	        ------------------------------------------------------------------------------------------------------ */

	        return $this;

	    }

	    /* ======================================================================================================
	       COMMIT TRANSACTION
	    ====================================================================================================== */

	    /**
	     * Commits a running transaction
	     *
	     * @access public
	     * @return Database
	     */
	    
	    public function CommitTransaction ( ): Database {

	        /* ------------------------------------------------------------------------------------------------------
	           ACT
	        ------------------------------------------------------------------------------------------------------ */

	        self::$PDO -> commit();

	        /* ------------------------------------------------------------------------------------------------------
	           RETURN
	        ------------------------------------------------------------------------------------------------------ */

	        return $this;

	    }

	    /* ======================================================================================================
	       ROLLBACK TRANSACTION
	    ====================================================================================================== */

	    /**
	     * Rolls back a running transaction
	     *
	     * @access public
	     * @return Database
	     */
	    
	    public function RollbackTransaction ( ): Database {

	        /* ------------------------------------------------------------------------------------------------------
	           ACT
	        ------------------------------------------------------------------------------------------------------ */

	        self::$PDO -> rollback();

	        /* ------------------------------------------------------------------------------------------------------
	           RETURN
	        ------------------------------------------------------------------------------------------------------ */

	        return $this;

	    }

	    /* ======================================================================================================
	       LAST INSERT ID
	    ====================================================================================================== */

	    /**
	     * Rolls back a running transaction
	     *
	     * @access public
	     * @return int
	     */
	    
	    public function LastInsertId ( ): int {

	        /* ------------------------------------------------------------------------------------------------------
	           RETURN
	        ------------------------------------------------------------------------------------------------------ */

	        return self::$PDO -> lastInsertId();

	    }

	}